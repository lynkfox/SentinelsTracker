// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using website.Models;

namespace website.Data.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20200529164754_AdjustingHeroAndVillainTables")]
    partial class AdjustingHeroAndVillainTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("website.Models.databaseModels.AccessLevel", b =>
                {
                    b.Property<int>("Level")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LevelCommonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Modify")
                        .HasColumnType("bit");

                    b.Property<bool>("Read")
                        .HasColumnType("bit");

                    b.HasKey("Level");

                    b.ToTable("AccessLevels","users");
                });

            modelBuilder.Entity("website.Models.databaseModels.BoxSet", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicationDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WikiLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("BoxSets","gamedata");
                });

            modelBuilder.Entity("website.Models.databaseModels.Game", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateEntered")
                        .HasColumnType("datetime2");

                    b.Property<string>("Platform")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("Games","statistics");
                });

            modelBuilder.Entity("website.Models.databaseModels.GameDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("CalculatedDifficulty")
                        .HasColumnType("float");

                    b.Property<string>("EnvironmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GameEndCondition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GameEnvironmentName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<string>("GameMode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GameTimeLength")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeroPositionsIncap")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int>("HeroTeamId")
                        .HasColumnType("int");

                    b.Property<bool>("HouseRules")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfPlayers")
                        .HasColumnType("int");

                    b.Property<int>("PerceivedDifficulty")
                        .HasColumnType("int");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Rounds")
                        .HasColumnType("int");

                    b.Property<string>("SelectionMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserComment")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("VillainPostionsIncap")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int>("VillainTeamId")
                        .HasColumnType("int");

                    b.Property<bool>("Win")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("EnvironmentName");

                    b.HasIndex("GameEnvironmentName");

                    b.HasIndex("GameId")
                        .IsUnique();

                    b.HasIndex("HeroTeamId");

                    b.HasIndex("VillainTeamId");

                    b.ToTable("GameDetails","statistics");
                });

            modelBuilder.Entity("website.Models.databaseModels.GameEnvironment", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BoxSetId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WikiLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Name");

                    b.HasIndex("BoxSetId");

                    b.ToTable("GameEnvironments","gamedata");
                });

            modelBuilder.Entity("website.Models.databaseModels.Hero", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BoxSetId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAlt")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrintedComplexity")
                        .HasColumnType("int");

                    b.Property<string>("Team")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WikiLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("BoxSetId");

                    b.ToTable("HeroCharacters","gamedata");
                });

            modelBuilder.Entity("website.Models.databaseModels.HeroTeam", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FifthHeroId")
                        .HasColumnType("int");

                    b.Property<int?>("FirstHeroId")
                        .HasColumnType("int");

                    b.Property<int?>("FourthHeroId")
                        .HasColumnType("int");

                    b.Property<int?>("SecondHeroId")
                        .HasColumnType("int");

                    b.Property<int?>("ThirdHeroId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("FifthHeroId");

                    b.HasIndex("FirstHeroId");

                    b.HasIndex("FourthHeroId");

                    b.HasIndex("SecondHeroId");

                    b.HasIndex("ThirdHeroId");

                    b.ToTable("HeroTeams","statistics");
                });

            modelBuilder.Entity("website.Models.databaseModels.LoginAttempt", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AttemptTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("IPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("LoginAttempts","logging");
                });

            modelBuilder.Entity("website.Models.databaseModels.PasswordHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ChangedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PreviousHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreviousSalt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("PasswordHistories","logging");
                });

            modelBuilder.Entity("website.Models.databaseModels.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Profile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("UserIcon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("ID");

                    b.ToTable("Users","users");
                });

            modelBuilder.Entity("website.Models.databaseModels.UserPermission", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessLevelId")
                        .HasColumnType("int");

                    b.Property<string>("Hash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AccessLevelId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserPermissions","users");
                });

            modelBuilder.Entity("website.Models.databaseModels.Villain", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BoxSetId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrintedDifficulty")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WikiLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("BoxSetId");

                    b.ToTable("VillainCharacters","gamedata");
                });

            modelBuilder.Entity("website.Models.databaseModels.VillainTeam", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FifthVillainId")
                        .HasColumnType("int");

                    b.Property<int?>("FirstVillainId")
                        .HasColumnType("int");

                    b.Property<int?>("FourthVillainId")
                        .HasColumnType("int");

                    b.Property<bool>("OblivAeon")
                        .HasColumnType("bit");

                    b.Property<int?>("SecondVillainId")
                        .HasColumnType("int");

                    b.Property<int?>("ThirdVillainId")
                        .HasColumnType("int");

                    b.Property<bool>("VillainTeamGame")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("FifthVillainId");

                    b.HasIndex("FirstVillainId");

                    b.HasIndex("FourthVillainId");

                    b.HasIndex("SecondVillainId");

                    b.HasIndex("ThirdVillainId");

                    b.ToTable("VillainTeams","statistics");
                });

            modelBuilder.Entity("website.Models.databaseModels.Game", b =>
                {
                    b.HasOne("website.Models.databaseModels.User", "User")
                        .WithMany("Games")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("website.Models.databaseModels.GameDetail", b =>
                {
                    b.HasOne("website.Models.databaseModels.GameEnvironment", "Environment")
                        .WithMany()
                        .HasForeignKey("EnvironmentName")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("website.Models.databaseModels.GameEnvironment", null)
                        .WithMany("GameDetails")
                        .HasForeignKey("GameEnvironmentName");

                    b.HasOne("website.Models.databaseModels.Game", "Game")
                        .WithOne("GameDetails")
                        .HasForeignKey("website.Models.databaseModels.GameDetail", "GameId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("website.Models.databaseModels.HeroTeam", "HeroTeam")
                        .WithMany()
                        .HasForeignKey("HeroTeamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("website.Models.databaseModels.VillainTeam", "VillainTeam")
                        .WithMany()
                        .HasForeignKey("VillainTeamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("website.Models.databaseModels.GameEnvironment", b =>
                {
                    b.HasOne("website.Models.databaseModels.BoxSet", "BoxSet")
                        .WithMany("GameEnvironments")
                        .HasForeignKey("BoxSetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("website.Models.databaseModels.Hero", b =>
                {
                    b.HasOne("website.Models.databaseModels.BoxSet", "BoxSet")
                        .WithMany("Heroes")
                        .HasForeignKey("BoxSetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("website.Models.databaseModels.HeroTeam", b =>
                {
                    b.HasOne("website.Models.databaseModels.Hero", "FifthHero")
                        .WithMany("FifthPosition")
                        .HasForeignKey("FifthHeroId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("website.Models.databaseModels.Hero", "FirstHero")
                        .WithMany("FirstPosition")
                        .HasForeignKey("FirstHeroId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("website.Models.databaseModels.Hero", "FourthHero")
                        .WithMany("FourthPosition")
                        .HasForeignKey("FourthHeroId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("website.Models.databaseModels.Hero", "SecondHero")
                        .WithMany("SecondPosition")
                        .HasForeignKey("SecondHeroId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("website.Models.databaseModels.Hero", "ThirdHero")
                        .WithMany("ThirdPosition")
                        .HasForeignKey("ThirdHeroId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("website.Models.databaseModels.LoginAttempt", b =>
                {
                    b.HasOne("website.Models.databaseModels.User", "User")
                        .WithMany("LoginAttempts")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("website.Models.databaseModels.PasswordHistory", b =>
                {
                    b.HasOne("website.Models.databaseModels.User", "User")
                        .WithMany("PasswordHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("website.Models.databaseModels.UserPermission", b =>
                {
                    b.HasOne("website.Models.databaseModels.AccessLevel", "AccessLevel")
                        .WithMany("UserPermissions")
                        .HasForeignKey("AccessLevelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("website.Models.databaseModels.User", "User")
                        .WithOne("UserPermission")
                        .HasForeignKey("website.Models.databaseModels.UserPermission", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("website.Models.databaseModels.Villain", b =>
                {
                    b.HasOne("website.Models.databaseModels.BoxSet", "BoxSet")
                        .WithMany("Villains")
                        .HasForeignKey("BoxSetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("website.Models.databaseModels.VillainTeam", b =>
                {
                    b.HasOne("website.Models.databaseModels.Villain", "FifthVillain")
                        .WithMany("FifthPosition")
                        .HasForeignKey("FifthVillainId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("website.Models.databaseModels.Villain", "FirstVillain")
                        .WithMany("FirstPosition")
                        .HasForeignKey("FirstVillainId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("website.Models.databaseModels.Villain", "FourthVillain")
                        .WithMany("FourthPosition")
                        .HasForeignKey("FourthVillainId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("website.Models.databaseModels.Villain", "SecondVillain")
                        .WithMany("SecondPosition")
                        .HasForeignKey("SecondVillainId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("website.Models.databaseModels.Villain", "ThirdVillain")
                        .WithMany("ThirdPosition")
                        .HasForeignKey("ThirdVillainId")
                        .OnDelete(DeleteBehavior.NoAction);
                });
#pragma warning restore 612, 618
        }
    }
}
